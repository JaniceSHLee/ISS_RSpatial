> load(url("https://github.com/mgimond/Spatial/raw/main/Data/moransI.RData"))
Loading required package: sp
> library(tmap)
> tm_shape(s1) + tm_polygons(style="quantile", col = "Income") +
+     tm_legend(outside = TRUE, text.size = .8) 
> library(spdep)
Loading required package: spData
To access larger datasets in this package, install the spDataLarge package with:
`install.packages('spDataLarge', repos='https://nowosad.github.io/drat/',
type='source')`
Loading required package: sf
Linking to GEOS 3.9.1, GDAL 3.2.3, PROJ 7.2.1; sf_use_s2() is TRUE
> nb <- poly2nb(s1, queen=TRUE)
> nb[[1]]
[1] 2 3 4 5
> s1$NAME[1]
[1] Aroostook
16 Levels: Androscoggin Aroostook Cumberland Franklin Hancock Kennebec Knox Lincoln ... York
> s1$NAME[c(2,3,4,5)]
[1] Somerset    Piscataquis Penobscot   Washington 
16 Levels: Androscoggin Aroostook Cumberland Franklin Hancock Kennebec Knox Lincoln ... York
> lw <- nb2listw(nb, style="W", zero.policy=TRUE)
> lw$weights[1]
[[1]]
[1] 0.25 0.25 0.25 0.25

> Inc.lag <- lag.listw(lw, s1$Income)
> # Create a regression model
> M <- lm(Inc.lag ~ s1$Income)
> 
> # Plot the data
> plot( Inc.lag ~ s1$Income, pch=20, asp=1, las=1)
> coef(M)[2]
s1$Income 
0.2828111 
> n <- 599L   # Define the number of simulations
> I.r <- vector(length=n)  # Create an empty vector
> 
> for (i in 1:n){
+     # Randomly shuffle income values
+     x <- sample(s1$Income, replace=FALSE)
+     # Compute new set of lagged values
+     x.lag <- lag.listw(lw, x)
+     # Compute the regression slope and store its value
+     M.r    <- lm(x.lag ~ x)
+     I.r[i] <- coef(M.r)[2]
+ }
> # Plot the histogram of simulated Moran's I values
> # then add our observed Moran's I value to the plot
> hist(I.r, main=NULL, xlab="Moran's I", las=1)
> abline(v=coef(M)[2], col="red")
> N.greater <- sum(coef(M)[2] > I.r)
> p <- min(N.greater + 1, n + 1 - N.greater) / (n + 1)
> p
[1] 0.03666667
> moran.test(s1$Income,lw)

	Moran I test under randomisation

data:  s1$Income  
weights: lw    

Moran I statistic standard deviate = 2.2472, p-value = 0.01231
alternative hypothesis: greater
sample estimates:
Moran I statistic       Expectation          Variance 
       0.28281108       -0.06666667        0.02418480 

> MC<- moran.mc(s1$Income, lw, nsim=599)
> 
> # View results (including p-value)
> MC

	Monte-Carlo simulation of Moran I

data:  s1$Income 
weights: lw  
number of simulations + 1: 600 

statistic = 0.28281, observed rank = 586, p-value = 0.02333
alternative hypothesis: greater

> # Plot the distribution (note that this is a density plot instead of a histogram)
> plot(MC, main="", las=1)
> coo <- coordinates(s1)
> S.dist  <-  dnearneigh(coo, 0, 50000)  
> lw <- nb2listw(S.dist, style="W",zero.policy=T) 
> MI  <-  moran.mc(s1$Income, lw, nsim=599,zero.policy=T) 
> plot(MI, main="", las=1) 
> MI

	Monte-Carlo simulation of Moran I

data:  s1$Income 
weights: lw  
number of simulations + 1: 600 

statistic = 0.31361, observed rank = 597, p-value = 0.005
alternative hypothesis: greater
