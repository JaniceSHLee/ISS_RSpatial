
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[R.app GUI 1.77 (8007) x86_64-apple-darwin17.0]

[Workspace restored from /Users/matthewwalker/.RData]
[History restored from /Users/matthewwalker/.Rapp.history]

> load(url("https://github.com/mgimond/Spatial/raw/main/Data/raster.RData"))
> library(raster)
Loading required package: sp
> 
> bath2 <- bath * (-1)
> bath3 <- bath2 < 0
> library(tmap)
> tm_shape(bath3) + tm_raster(palette = "Greys") + 
+   tm_legend(outside = TRUE, text.size = .8) 
> m <- c(0, 100, 100,  100, 500, 500,  500, 
+        1000,  1000, 1000, 11000, 11000)
> m <- matrix(m, ncol=3, byrow = T)
> m
     [,1]  [,2]  [,3]
[1,]    0   100   100
[2,]  100   500   500
[3,]  500  1000  1000
[4,] 1000 11000 11000
> bath3 <- reclassify(bath, m, right = T)
> tm_shape(bath3) + tm_raster(style="cat") + tm_legend(outside = TRUE, text.size = .8) 
> bath3[bath3 == 100] <- NA
> tm_shape(bath3) + tm_raster(showNA=TRUE, colorNA="grey") + 
+   tm_legend(outside = TRUE, text.size = .8) 
> elevation <- elev - bath
> tm_shape(elevation) + tm_raster(palette="-RdBu",n=6) + 
+   tm_legend(outside = TRUE, text.size = .8) 
Variable(s) "NA" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.
> f1 <- focal(elevation, w=matrix(1,nrow=11,ncol=11)  , fun=mean)
> tm_shape(f1) + tm_raster(palette="-RdBu",n=6) + 
+   tm_legend(outside = TRUE, text.size = .8) 
Variable(s) "NA" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.
> f1 <- focal(elevation, w=matrix(1,nrow=11,ncol=11)  , 
+             fun=mean, pad=TRUE,  na.rm = TRUE)
> tm_shape(f1) + tm_raster(palette="-RdBu",n=6) + 
+   tm_legend(outside = TRUE, text.size = .8) 
Variable(s) "NA" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.
> # Using the mean function
> f_mean     <- focal(elevation, w=matrix(1,nrow=3,ncol=3), fun=mean, na.rm=TRUE, pad=TRUE)
> 
> # Using explicitly defined weights
> f_wt_nopad <- focal(elevation, w=matrix(1/9,nrow=3,ncol=3), na.rm=TRUE, pad=FALSE)
> f_wt_pad   <- focal(elevation, w=matrix(1/9,nrow=3,ncol=3), na.rm=TRUE, pad=TRUE)
> m  <- matrix(c(1,1,1,1,0,1,1,1,1)/8,nrow = 3) 
> f2 <- focal(elevation, w=m, fun=sum)
> Sobel <- matrix(c(-1,0,1,-2,0,2,-1,0,1) / 4, nrow=3) 
> f3    <- focal(elevation, w=Sobel, fun=sum) 
> 
> tm_shape(f3) + tm_raster(palette="Greys") + 
+   tm_legend(legend.show = FALSE) 
> z1 <- aggregate(elevation, fact=2, fun=mean, expand=TRUE)
> 
> tm_shape(z1) + tm_raster(palette="-RdBu",n=6) + 
+   tm_legend(outside = TRUE, text.size = .8) 
Variable(s) "NA" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.
> res(elevation)
[1] 0.3333333 0.3333333
> res(z1)
[1] 0.6666667 0.6666667
> cont.elev.sp <- extract(elevation, cont, fun=mean, sp=TRUE) 
library(sf)
cont.elev <- st_as_sf(cont.elev.sp)
> library(sf)
Linking to GEOS 3.9.1, GDAL 3.4.0, PROJ 8.1.1; sf_use_s2() is TRUE
> cont.elev <- st_as_sf(cont.elev.sp)
> library(sf)
> cont.elev <- st_as_sf(cont.elev.sp)
> st_drop_geometry(cont.elev)
      CONTINENT     layer
1        Africa  630.6706
2    Antarctica 2342.8605
3     Australia  276.5497
4        Europe  262.7817
5 North America  826.0598
6 South America  595.4753
7          Asia  790.6417
> tm_shape(cont.elev) + tm_polygons(col="layer") + 
+   tm_legend(outside = TRUE, text.size = .8)
> cont.elev.sp <- extract(elevation, cont, fun=max, sp=TRUE) 
> cont.elev.sp <- extract(elevation, cont, fun=function(x,...){length(x)}, sp=TRUE) 
r1   <- raster(ncol=100, nrow=100, xmn=0, xmx=100, ymn=0, ymx=100)
r1[] <- NA              # Assign NoData values to all pixels
r1[c(850, 5650)] <- 1   # Change the pixels #850 and #5650  to 1
crs(r1) <- "+proj=ortho"  # Assign an arbitrary coordinate system (needed for mapping with tmap)
> r1   <- raster(ncol=100, nrow=100, xmn=0, xmx=100, ymn=0, ymx=100)
> r1[] <- NA              # Assign NoData values to all pixels
> r1[c(850, 5650)] <- 1   # Change the pixels #850 and #5650  to 1
> crs(r1) <- "+proj=ortho"  # Assign an arbitrary coordinate system (needed for mapping with tmap)
> tm_shape(r1) + tm_raster(palette="red") + 
+   tm_legend(outside = TRUE, text.size = .8) 
> r1.d <- distance(r1) 
> tm_shape(r1.d) + tm_raster(palette = "Greens", style="order", title="Distance") + 
+   tm_legend(outside = TRUE, text.size = .8) +
+   tm_shape(r1) + tm_raster(palette="red", title="Points") 
> # Create a blank raster
> r2 <- raster(ncol=100, nrow=100, xmn=0, xmx=100, ymn=0, ymx=100)
> crs(r2) <- "+proj=ortho"  # Assign an arbitrary coordinate system 
> 
> # Create a point layer
> xy <- matrix(c(25,30,87,80),nrow=2, byrow=T) 
> p1 <- SpatialPoints(xy)
> crs(p1) <- "+proj=ortho"  # Assign an arbitrary coordinate system 
> r2.d <- distanceFromPoints(r2, p1)
> tm_shape(r2.d) + tm_raster(palette = "Greens", style="order") + 
+   tm_legend(outside = TRUE, text.size = .8) +
+   tm_shape(p1) + tm_bubbles(col="red") 
> library(gdistance)
Error in library(gdistance) : there is no package called ‘gdistance’
trying URL 'https://cran.ma.imperial.ac.uk/bin/macosx/contrib/4.1/gdistance_1.3-6.tgz'
Content type 'application/x-gzip' length 1385424 bytes (1.3 MB)
==================================================
downloaded 1.3 MB


The downloaded binary packages are in
	/var/folders/9j/pnm7wkl937dft0c039j34xmr0000gn/T//Rtmpx2iFRU/downloaded_packages
> library(gdistance)
Error: package ‘igraph’ required by ‘gdistance’ could not be found
> r   <- raster(nrows=100,ncols=100,xmn=0,ymn=0,xmx=100,ymx=100)
> r[] <- rep(1, ncell(r))
> h4   <- transition(r, transitionFunction = function(x){1}, directions = 4)
Error in transition(r, transitionFunction = function(x) { : 
  could not find function "transition"
trying URL 'https://cran.ma.imperial.ac.uk/bin/macosx/contrib/4.1/igraph_1.2.11.tgz'
Content type 'application/x-gzip' length 7298507 bytes (7.0 MB)
==================================================
downloaded 7.0 MB


The downloaded binary packages are in
	/var/folders/9j/pnm7wkl937dft0c039j34xmr0000gn/T//Rtmpx2iFRU/downloaded_packages
> library(gdistance)
Loading required package: igraph

Attaching package: ‘igraph’

The following object is masked from ‘package:raster’:

    union

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

Loading required package: Matrix

Attaching package: ‘gdistance’

The following object is masked from ‘package:igraph’:

    normalize

> r   <- raster(nrows=100,ncols=100,xmn=0,ymn=0,xmx=100,ymx=100)
> r[] <- rep(1, ncell(r))
> h4   <- transition(r, transitionFunction = function(x){1}, directions = 4)
> h8   <- transition(r, transitionFunction = function(x){1}, directions = 8)
> h16  <- transition(r, transitionFunction=function(x){1},16,symm=FALSE)
> hb   <- transition(r, transitionFunction=function(x){1},"bishop",symm=FALSE)
> h4    <- geoCorrection(h4,  scl=FALSE)
> h8    <- geoCorrection(h8,  scl=FALSE)
> h16   <- geoCorrection(h16, scl=FALSE)
> hb    <- geoCorrection(hb,  scl=FALSE)
> A       <- c(50,50) # Location of source cell
> h4.acc  <- accCost(h4,A)
> h8.acc  <- accCost(h8,A)
> h16.acc <- accCost(h16,A)
> hb.acc  <- accCost(hb,A) 
> hb.acc[hb.acc == Inf] <- NA
> # create an empty raster
> r   <- raster(nrows=300,ncols=150,xmn=0,ymn=0,xmx=150000, ymx=300000)
> 
> # Define a UTM projection (this sets map units to meters)
> projection(r) = "+proj=utm +zone=19 +datum=NAD83" 
> 
> # Each cell is assigned a value of 1
> r[] <- rep(1, ncell(r)) 
> 
> # Generate 'baffles' by assigning NA to cells. Cells are identified by
> # their index and not their coordinates.
> # Baffles need to be 2 cells thick to prevent the 16-node
> # case from "jumping" a one pixel thick NA cell.
> a <- c(seq(3001,3100,1),seq(3151,3250,1))
> a <- c(a, a+6000, a+12000, a+18000, a+24000, a+30000, a+36000)
> a <- c(a , a+3050)
> r[a] <- NA
> 
> # Let's check that the baffles are properly placed
> tm_shape(r) + tm_raster(colorNA="red") + 
+   tm_legend(legend.show=FALSE)
> 
> # Next, generate a transition matrix for the 8-node case and the 16-node case
> h8   <- transition(r, transitionFunction = function(x){1}, directions = 8)
> h16  <- transition(r, transitionFunction = function(x){1}, directions = 16)
> 
> # Now assign distance cost to the matrices. 
> h8   <- geoCorrection(h8)
> h16  <- geoCorrection(h16)
> 
> # Define a point source and assign a projection
> A <- SpatialPoints(cbind(50,290000))
> crs(A) <- "+proj=utm +zone=19 +datum=NAD83 +units=m +no_defs"  
> 
> # Compute the cumulative cost raster
> h8.acc   <- accCost(h8, A)
> h16.acc  <- accCost(h16,A)
> 
> # Replace Inf with NA
> h8.acc[h8.acc   == Inf] <- NA
> h16.acc[h16.acc == Inf] <- NA
> tm_shape(h8.acc) + tm_raster(n=2, style="fixed", breaks=c(0,290000,Inf)) +
+   tm_facets() + tm_shape(A) + tm_bubbles(col="green", size = .5) + 
+   tm_legend(outside = TRUE, text.size = .8)
> 
> tm_shape(h16.acc) + tm_raster(n=2, style="fixed", breaks=c(0,290000,Inf)) + 
+   tm_facets() + tm_shape(A) + tm_bubbles(col="green", size = .5) + 
+   tm_legend(outside = TRUE, text.size = .8)
> table(h8.acc[]  <= 290000) 

FALSE  TRUE 
31458 10742 
> table(h16.acc[] <= 290000)

FALSE  TRUE 
30842 11358 
> 
