library(sf)
z <- gzcon(url("https://github.com/mgimond/Spatial/raw/main/Data/Income_schooling_sf.rds"))
s1.sf <- readRDS(z)
z <- gzcon(url("https://github.com/mgimond/Spatial/raw/main/Data/Dist_sf.rds"))
s2.sf <- readRDS(z)
z <- gzcon(url("https://github.com/mgimond/Spatial/raw/main/Data/Highway_sf.rds"))
l1.sf <- readRDS(z)
# plot layers
library(ggplot2)
ggplot() +
geom_sf(data = s1.sf) +
geom_sf(data = s2.sf, alpha = 0.5, col = "red") +
geom_sf(data = l1.sf, col = "blue")
s1.sf
s2.sf
## Option 2: make use of dplyr - use this.
library(dplyr)
ME <- s1.sf %>%
group_by() %>%
summarise()
ggplot(ME) + geom_sf(fill = "grey")
ME
### Dissolving by attribute ####
# create a new column whose value will be binary (TRUE/FALSE) depending on
# whether or not the county income is below the counties' median income value
s1.sf$med <- s1.sf$Income > median(s1.sf$Income)
ggplot(s1.sf) + geom_sf(aes(fill = med))
## Option 2
ME.inc <- s1.sf %>%
group_by(med) %>%
summarise()
st_drop_geometry(ME.inc)
## Option 2
ME.inc <- s1.sf %>%
group_by(med) %>%
summarise()
st_drop_geometry(ME.inc)
# plot
ggplot(ME.inc) + geom_sf(aes(fill = med))
# use dplyr piping operation option - e.g., compute median Income value for each group
ME.inc <- s1.sf %>%
group_by(med) %>%
summarize(medinc = median(Income))
ggplot(ME.inc) + geom_sf(aes(fill = medinc))
# view attribute table
st_drop_geometry(ME.inc)
# conventional R dataframe manipulation
ME.ken <- s1.sf[s1.sf$NAME == "Kennebec",]
# use piping operations
ME.ken <- s1.sf %>%
filter(NAME == "Kennebec")
# plot
ggplot(ME.ken) + geom_sf()
## subset by a range of attributes - subset by income values less than median values
ME.inc2 <- s1.sf %>%
filter(Income < median(Income))
ggplot(ME.inc2) + geom_sf()
clp1 <- st_intersection(s1.sf, s2.sf) # to get intersecting layers between two sf
ggplot(clp1) + geom_sf()
st_drop_geometry(clp1)
s2.sf
### Unioning layers ####
un1 <- st_union(s2.sf, s1.sf)#vs st_union on one layer that dissolve the geometry
View(un1)
# to create a continuous polygon geometry, i.e., to eliminate overlapping buffers
# use dissolving techniques earlier in tutorial
l1.sf.buf.dis <- l1.sf.buf %>%
group_by()  %>%
summarise()
ggplot(l1.sf.buf.dis) + geom_sf()
### Buffering geometries ####
# generate 10 km (10000 m) buffer around polyline segments
l1.sf.buf <- st_buffer(l1.sf, dist = 10000)
ggplot(l1.sf.buf) + geom_sf() + coord_sf(ndiscr = 1000) #looks messy
# to create a continuous polygon geometry, i.e., to eliminate overlapping buffers
# use dissolving techniques earlier in tutorial
l1.sf.buf.dis <- l1.sf.buf %>%
group_by()  %>%
summarise()
ggplot(l1.sf.buf.dis) + geom_sf()
View(l1.sf.buf.dis)
# to preserve attribute value such as highway number, modify above code
l1.sf.buf.dis <- l1.sf.buf %>%
group_by(Number)  %>%
summarise()
View(l1.sf.buf.dis)
ggplot(l1.sf.buf.dis, aes(fill=Number) ) + geom_sf(alpha = 0.5)
load(url("https://github.com/mgimond/Spatial/raw/main/Data/Sample1.RData"))
rm(list=c("inter.sf", "p.sf", "rail.sf"))
library(sf)
#check linked library version
sf_extSoftVersion()[1:3]
library(raster)
crs(elev.r)
#maunally assign coordinate system
s.sf <- st_set_crs(s.sf, "+proj=utm +zone=19 +ellps=GRS80 +datum=NAD83")
st_crs(s.sf)
# overlapping with web based mapping
library(leaflet) # open street map
leaflet(s.sf.gcs) %>%
addPolygons() %>%
addTiles()
#same coordinate system
## using proj4 string
s.sf.gcs <- st_transform(s.sf, "+proj=longlat +datum=WGS84")
st_crs(s.sf.gcs)
##using EPSG code
s.sf.gcs <- st_transform(s.sf, 4326)
st_crs(s.sf.gcs)
#to transform raster object
elev.r.gcs <- projectRaster(elev.r, crs="+proj=longlat +datum=WGS84")
crs(elev.r.gcs)
## for EPSG code
elev.r.gcs <- projectRaster(elev.r, crs="+init=EPSG:4326")
crs(elev.r.gcs)
# overlapping with web based mapping
library(leaflet) # open street map
leaflet(s.sf.gcs) %>%
addPolygons() %>%
addTiles()
# exploring other transformations
library(tmap)
data(World)  # The dataset is stored as an sf object
# Let's check its current coordinate system
st_crs(World)
World.ae <- st_transform(World, "+proj=aeqd +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
st_crs(World.ae)
#mapped output
tm_shape(World.ae) + tm_fill()
# recentering the projection to another area.
World.aemaine <- st_transform(World, "+proj=aeqd +lat_0=44.5 +lon_0=-69.8 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
tm_shape(World.aemaine) + tm_fill()
library(maptools)
# Convert to lat/long reference system
wld.ll <- st_transform(World, "+proj=longlat +datum=WGS84 +no_defs")
# Convert to a spatial object, then split the polygons at a given longitude (111 in this example)
wld.sp <- nowrapSpatialPolygons(as(wld.ll, "Spatial"), offset = 111)
# Now convert back to an sf object, reproject to a new longitude center at -69 degrees
# then plot it
wld.sf <- st_as_sf(wld.sp)
wld.merc2.sf <- st_transform(wld.sf, "+proj=merc +lon_0=-69 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
tm_shape(wld.merc2.sf) + tm_borders()
# Define a few projections
miller <- "+proj=mill +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
lambert <- "+proj=lcc +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"
# Subset the World data layer
wld.mil <-  World %>% filter( iso_a3  == "CAN" |  iso_a3 == "USA") %>% st_transform( miller)
# Create polygon and point layers in the Miller projection
sf1 <- st_sfc( st_polygon(list(cbind(c(-13340256,-13340256,-6661069, -6661069, -13340256),
c(7713751, 5326023, 5326023,7713751, 7713751 )))), crs = miller)
pt1 <- st_sfc( st_multipoint(rbind(c(-11688500,7633570), c(-11688500,5375780),
c(-10018800,7633570), c(-10018800,5375780),
c(-8348960,7633570), c(-8348960,5375780))),  crs = miller)
pt1 <- st_cast(pt1, "POINT") # Create single part points
# Plot the data layers in their native projection
tm_shape(wld.mil) +tm_fill(col="grey") +
tm_graticules(x = c(-60,-80,-100, -120, -140),
y = c(30,45, 60),
labels.col = "white", col="grey90") +
tm_shape(sf1) + tm_polygons("red", alpha = 0.5, border.col = "yellow") +
tm_shape(pt1) + tm_dots(size=0.2)
# to confirm if points are inside the boundary
st_contains(sf1, pt1)
wld.lam <- st_transform(wld.mil, lambert)
pt1.lam <- st_transform(pt1, lambert)
sf1.lam <- st_transform(sf1, lambert)
# Plot the data in the Lambert coordinate system
tm_shape(wld.lam) +tm_fill(col="grey") +
tm_graticules( x = c(-60,-80,-100, -120, -140),
y = c(30,45, 60),
labels.col = "white", col="grey90") +
tm_shape(sf1.lam) + tm_polygons("red", alpha = 0.5, border.col = "yellow") +
tm_shape(pt1.lam) + tm_dots(size=0.2)
sf2 <- st_segmentize(sf1, 1000)
# Transform the newly densified polygon layer
sf2.lam <- st_transform(sf2, lambert)
# Plot the data
tm_shape(wld.lam) + tm_fill(col="grey") +
tm_graticules( x = c(-60,-80,-100, -120, -140),
y = c(30,45, 60),
labels.col = "white", col="grey90") +
tm_shape(sf2.lam) + tm_polygons("red", alpha = 0.5, border.col = "yellow") +
tm_shape(pt1.lam) + tm_dots(size=0.2)
# Load spatial data
library(rgdal)
mydata <- readOGR("Income_schooling.shp")
mydata
mydata <- readOGR("Income_schooling.shp")
# Load spatial data
library(rgdal)
mydata <- readOGR("Income_schooling.shp")
gc()
